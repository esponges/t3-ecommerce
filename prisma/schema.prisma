// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? //@db.Text
    access_token      String? //@db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? //@db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
    
model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    orders        Order[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Product {
    id          String   @id @default(cuid())
    name        String
    description String
    discount    Float
    categoryId  Int
    category    Category @relation(fields: [categoryId], references: [id])
    price       Float
    image       String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    orderItem   OrderItem[]
    score       Float
    favScore    Float
    productSpecs ProductSpecs?
}

model ProductSpecs {
    id        String @id @default(cuid())
    productId String @unique
    product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
    capacity  String
    volume    String
    age       String
    country   String
    year      String
}

model Category {
    id          Int     @id @default(autoincrement())
    name        String
    description String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    product     Product[]
}

model OrderItem {
    id        String @id @default(cuid())
    quantity  Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    orderId   String
    order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
    productId String
    product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model OrderDetail {
    id        String @id @default(cuid())
    address   String
    city      String
    country   String
    postalCode String
    phone     String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    orderId   String  @unique
    order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Order {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String   
    orderItems  OrderItem[]
    orderDetail OrderDetail?
}


